{"mappings":"ACIA,SAAS,gBAAgB,CAAC,cAAe,SAAC,CAA1C,EAAgD,OAAA,EAAE,cAAc,E,GAEhE,IAAM,EAAO,SAAS,aAAa,CAAC,QAEpC,SAAS,EAAmB,CAAI,CAAE,CAAU,EAC1C,IAAM,EAAe,SAAS,aAAa,CAAC,MAE5C,CAAA,EAAa,OAAO,CAAC,EAAE,CAAG,eAC1B,EAAa,SAAS,CAAC,GAAG,CAAC,GAC3B,EAAa,WAAW,CAAG,EAC3B,EAAK,MAAM,CAAC,EACd,CAEA,IAAM,EAAgB,SAAC,CAAvB,EACE,EAAmB,EAAK,UAC1B,EAEM,EAAc,SAAC,CAArB,EACE,EAAmB,EAAK,QAC1B,EAEqB,IAAI,QAAQ,SAAC,CAAA,CAAS,CAA3C,EACE,SAAS,gBAAgB,CAAC,QAAS,WACjC,EAAQ,6BACV,GAEA,WAAW,WAAM,OAAA,EAAO,6BAA+B,EAAA,IACzD,GACG,IAAI,CAAC,GACL,KAAK,CAAC,GAEa,IAAI,QAAQ,SAAC,CAAnC,EACE,SAAS,gBAAgB,CAAC,YAAa,SAAC,CAAxC,EACM,CAAC,EAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,MAAM,GAC1B,EAAQ,8BAEZ,EACF,GACG,IAAI,CAAC,GACL,KAAK,CAAC,GAEY,IAAI,QAAQ,SAAC,CAAlC,EACE,IAAI,EAAQ,EAEN,EAAa,WACH,IAAV,GACF,EAAQ,6BAEZ,EAEA,SAAS,gBAAgB,CACvB,QACA,WACE,GAAS,EACT,GACF,EACA,CAAE,KAAM,CAAA,CAAK,GAGf,SAAS,gBAAgB,CACvB,cACA,WACE,GAAS,EACT,GACF,EACA,CAAE,KAAM,CAAA,CAAK,EAEjB,GACG,IAAI,CAAC,GACL,KAAK,CAAC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["/* eslint-disable no-unused-vars */ /* eslint-disable prefer-promise-reject-errors */ \"use strict\";\ndocument.addEventListener(\"contextmenu\", function(e) {\n    return e.preventDefault();\n});\nvar body = document.querySelector(\"body\");\nfunction appendNotification(text, extraClass) {\n    var notification = document.createElement(\"div\");\n    notification.dataset.qa = \"notification\";\n    notification.classList.add(extraClass);\n    notification.textContent = text;\n    body.append(notification);\n}\nvar handleSuccess = function(msg) {\n    appendNotification(msg, \"success\");\n};\nvar handleError = function(msg) {\n    appendNotification(msg, \"error\");\n};\nvar firstPromise = new Promise(function(resolve, reject) {\n    document.addEventListener(\"click\", function() {\n        resolve(\"First promise was resolved\");\n    });\n    setTimeout(function() {\n        return reject(\"First promise was rejected\");\n    }, 3000);\n}).then(handleSuccess).catch(handleError);\nvar secondPromise = new Promise(function(resolve) {\n    document.addEventListener(\"mousedown\", function(e) {\n        if ([\n            0,\n            2\n        ].includes(e.button)) resolve(\"Second promise was resolved\");\n    });\n}).then(handleSuccess).catch(handleError);\nvar thirdPromise = new Promise(function(resolve) {\n    var count = 0;\n    var tryResolve = function() {\n        if (count === 2) resolve(\"Third promise was resolved\");\n    };\n    document.addEventListener(\"click\", function() {\n        count += 1;\n        tryResolve();\n    }, {\n        once: true\n    });\n    document.addEventListener(\"contextmenu\", function() {\n        count += 1;\n        tryResolve();\n    }, {\n        once: true\n    });\n}).then(handleSuccess).catch(handleError);\n\n//# sourceMappingURL=index.12f7fddb.js.map\n","/* eslint-disable no-unused-vars */\n/* eslint-disable prefer-promise-reject-errors */\n'use strict';\n\ndocument.addEventListener('contextmenu', (e) => e.preventDefault());\n\nconst body = document.querySelector('body');\n\nfunction appendNotification(text, extraClass) {\n  const notification = document.createElement('div');\n\n  notification.dataset.qa = 'notification';\n  notification.classList.add(extraClass);\n  notification.textContent = text;\n  body.append(notification);\n}\n\nconst handleSuccess = (msg) => {\n  appendNotification(msg, 'success');\n};\n\nconst handleError = (msg) => {\n  appendNotification(msg, 'error');\n};\n\nconst firstPromise = new Promise((resolve, reject) => {\n  document.addEventListener('click', () => {\n    resolve('First promise was resolved');\n  });\n\n  setTimeout(() => reject('First promise was rejected'), 3000);\n})\n  .then(handleSuccess)\n  .catch(handleError);\n\nconst secondPromise = new Promise((resolve) => {\n  document.addEventListener('mousedown', (e) => {\n    if ([0, 2].includes(e.button)) {\n      resolve('Second promise was resolved');\n    }\n  });\n})\n  .then(handleSuccess)\n  .catch(handleError);\n\nconst thirdPromise = new Promise((resolve) => {\n  let count = 0;\n\n  const tryResolve = () => {\n    if (count === 2) {\n      resolve('Third promise was resolved');\n    }\n  };\n\n  document.addEventListener(\n    'click',\n    () => {\n      count += 1;\n      tryResolve();\n    },\n    { once: true },\n  );\n\n  document.addEventListener(\n    'contextmenu',\n    () => {\n      count += 1;\n      tryResolve();\n    },\n    { once: true },\n  );\n})\n  .then(handleSuccess)\n  .catch(handleError);\n"],"names":["document","addEventListener","e","preventDefault","body","querySelector","appendNotification","text","extraClass","notification","createElement","dataset","qa","classList","add","textContent","append","handleSuccess","msg","handleError","Promise","resolve","reject","setTimeout","then","catch","includes","button","count","tryResolve","once"],"version":3,"file":"index.12f7fddb.js.map"}